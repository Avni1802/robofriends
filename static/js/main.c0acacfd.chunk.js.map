{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardComponent","map","user","i","Searchbox","searchfield","searchChange","type","style","outline","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","console","log"],"mappings":"2NAceA,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAOC,EAAM,EAANA,GACxB,OACI,sBAAKC,UAAU,oDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,SACpD,gCACI,6BAAKL,IACL,4BAAIC,WCYLK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OACC,cAAC,EAAD,CAEAT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZU,MAMV,OACI,8BACKH,KCAEI,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC5B,OACI,qBAAKX,UAAU,MAAf,SACA,uBAAOA,UAAU,mCACjBY,KAAK,SACLC,MAAO,CAACC,QAAQ,QAChBC,YAAY,gBACZC,SAAUL,OC8BHM,E,kDAjCX,aAAc,IAAD,8BACT,gBAcJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACV,YAAaS,EAAME,OAAOC,SAdzC,EAAKC,MAAM,CACPnB,OAAQ,GACRM,YAAa,IAJR,E,gEAQO,IAAD,OACfc,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAAChB,OAAQwB,S,+BASjC,IAAD,OACCC,EAAiBC,KAAKP,MAAMnB,OAAO2B,QAAO,SAAAC,GAC5C,OAAOA,EAAMnC,KAAKoC,cAAcC,SAAS,EAAKX,MAAMb,YAAYuB,kBAExE,OACI,sBAAKjC,UAAU,KAAf,UACA,6CACA,cAAC,EAAD,CAAWW,aAAcmB,KAAKZ,iBAC9B,cAAC,EAAD,CAAUd,OAAQyB,W,GA7BRM,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCIdO,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAKhDX,EAAgBY,QAAQC,IAAI,U","file":"static/js/main.c0acacfd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id})=>{\r\n    return (\r\n        <div className='bg-light-green dib pa3 br3 ma2 grow bw2 shadow-5 '>\r\n            <img src={`https://robohash.org/${id}?100*100`} alt=\"logo\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponent = robots.map((user,i) => {\r\n        return (\r\n         <Card\r\n         key={i}\r\n         id={robots[i].id} \r\n         name={robots[i].name} \r\n         email={robots[i].email} \r\n         />);\r\n    } )\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield,searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n        <input className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        style={{outline:\"none\"}}\r\n        placeholder='Search robots' \r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbox;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport {robots} from '../robots';\r\nimport Searchbox from '../components/Searchbox';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => {this.setState({robots: users})});\r\n    }\r\n\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n\r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n    return (\r\n        <div className='tc'>\r\n        <h1>RoboFriends</h1>\r\n        <Searchbox searchChange={this.onSearchChange}/>\r\n        <CardList robots={filteredRobots} />\r\n        </div>\r\n    )}\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\nimport 'tachyons';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n// import {robots} from './robots';\n// import registerSer\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n \n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log(\"hll\"));\n"],"sourceRoot":""}